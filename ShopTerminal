-- LongiMart Banking Terminal with Pack Store (Pro UI Version)

local monitor = peripheral.find("monitor")
local drive = peripheral.find("drive")
if not monitor or not drive then error("Monitor or Drive not found!") end

monitor.setTextScale(0.5)
local key = 97

-- Packs available
local packs = {
  {
    name = "AE2 Pack",
    items = {"Controller", "Drive", "Cables"},
    price = math.random(300, 1230),
  },
  {
    name = "Mekanism Generator Pack",
    items = {"Heat Generator", "Gas-Burning Generator", "Cables"},
    price = math.random(300, 1230),
  },
  {
    name = "Refined Storage Pack",
    items = {"Controller", "Grid", "Disk Drive"},
    price = math.random(300, 1230),
  },
  {
    name = "Mob Grinding Utils Pack",
    items = {"Mob Crusher", "Fan", "Absorption Hopper"},
    price = math.random(300, 1230),
  },
}

local function xor(str)
  local out = {}
  for i = 1, #str do
    table.insert(out, string.char(bit.bxor(str:byte(i), key)))
  end
  return table.concat(out)
end

local function readWallet()
  if not drive.isDiskPresent() then return nil end
  if not fs.exists("disk/wallet.dat") then return {balance=0, id=0} end
  local f = fs.open("disk/wallet.dat", "r")
  local data = xor(f.readAll())
  f.close()
  local parts = {}
  for value in string.gmatch(data, "[^|]+") do
    table.insert(parts, value)
  end
  return {balance=tonumber(parts[1]), id=tonumber(parts[2])}
end

local function writeWallet(balance, id)
  local f = fs.open("disk/wallet.dat", "w")
  f.write(xor(tostring(balance) .. "|" .. tostring(id)))
  f.close()
end

local function drawCenter(y, text, color, bg)
  local w = select(1, monitor.getSize())
  local x = math.floor((w - #text) / 2) + 1
  monitor.setCursorPos(x, y)
  monitor.setBackgroundColor(bg or colors.black)
  monitor.setTextColor(color or colors.white)
  monitor.clearLine()
  monitor.write(text)
end

local function drawBorder()
  local w, h = monitor.getSize()
  monitor.setTextColor(colors.gray)
  for i = 1, w do
    monitor.setCursorPos(i, 1)
    monitor.write("-")
    monitor.setCursorPos(i, h)
    monitor.write("-")
  end
  for i = 1, h do
    monitor.setCursorPos(1, i)
    monitor.write("|")
    monitor.setCursorPos(w, i)
    monitor.write("|")
  end
end

local function drawPackMenu(wallet)
  local w, h = monitor.getSize()
  monitor.setBackgroundColor(colors.black)
  monitor.clear()
  drawBorder()

  drawCenter(2, "========== LongiMart Terminal ==========" , colors.yellow)
  drawCenter(3, " Select a Pack to View Details ", colors.lime)
  drawCenter(5, "Wallet Balance: " .. wallet.balance .. " BB", colors.cyan)

  local y = 7
  for i, pack in ipairs(packs) do
    local packLabel = "[" .. i .. "] " .. pack.name
    local priceLabel = "Price: " .. pack.price .. " BB"

    monitor.setCursorPos(4, y)
    monitor.setBackgroundColor(colors.gray)
    monitor.setTextColor(colors.black)
    monitor.clearLine()
    monitor.write(packLabel)

    -- Position the price at a safe distance from the end
    monitor.setCursorPos(w - #priceLabel - 3, y)
    monitor.write(priceLabel)

    y = y + 2
  end
end

local function drawPackDetail(idx, wallet)
  local w, h = monitor.getSize()
  local pack = packs[idx]
  monitor.clear()
  drawBorder()

  drawCenter(2, "--- Pack Details ---", colors.yellow)
  drawCenter(3, pack.name, colors.orange)

  monitor.setTextColor(colors.white)
  local y = 5
  for i, item in ipairs(pack.items) do
    monitor.setCursorPos(4, y)
    monitor.write("- " .. item)
    y = y + 1
  end

  drawCenter(h - 4, "Price: " .. pack.price .. " BB", colors.green)
  drawCenter(h - 3, "Wallet: " .. wallet.balance .. " BB", colors.cyan)
  drawCenter(h - 1, "Right-click to Confirm Purchase", colors.lime)
  drawCenter(h, "Or click above to Cancel", colors.gray)
end

local function main()
  while true do
    local wallet = readWallet()
    if not wallet then
      monitor.setBackgroundColor(colors.black)
      monitor.clear()
      drawCenter(5, "Insert Wallet Disk to Begin", colors.red)
      sleep(1)
    else
      drawPackMenu(wallet)
      local _, _, x, y = os.pullEvent("monitor_touch")
      local selection = math.floor((y - 7) / 2) + 1
      if packs[selection] then
        drawPackDetail(selection, wallet)
        local _, _, _, confirmY = os.pullEvent("monitor_touch")
        if confirmY == select(2, monitor.getSize()) then
          if wallet.balance >= packs[selection].price then
            wallet.balance = wallet.balance - packs[selection].price
            writeWallet(wallet.balance, wallet.id)
            monitor.clear()
            drawCenter(5, "Purchase Complete!", colors.green)
            sleep(2)
          else
            drawCenter(5, "Insufficient Balance!", colors.red)
            sleep(2)
          end
        end
      end
    end
  end
end

main()

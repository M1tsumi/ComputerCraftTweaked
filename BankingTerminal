-- LongiMart Banking Terminal
local monitor = peripheral.find("monitor")
local drive = peripheral.find("drive")
if not monitor or not drive then error("Monitor or Drive not found!") end

-- Set text scale to minimum allowed (0.5)
monitor.setTextScale(0.5)
local key = 97

-- Pastel purple palette (ComputerCraft 1.80+)
local pastelPurples = {
  colors.purple,
}

-- Helper to get a pastel purple (cycle by line or section)
local function getPastelPurple(idx)
  return pastelPurples[1]
end

-- Encryption functions
local function xor(str)
  local out = {}
  for i = 1, #str do
    table.insert(out, string.char(bit.bxor(str:byte(i), key)))
  end
  return table.concat(out)
end

-- Reads wallet balance and ID from disk
local function readWallet()
  if not drive.isDiskPresent() then return nil end
  if not fs.exists("disk/wallet.dat") then
    return {balance = 0, id = 0}
  end
  local f = fs.open("disk/wallet.dat", "r")
  local data = xor(f.readAll())
  f.close()
  local parts = {}
  for value in string.gmatch(data, "[^|]+") do
    table.insert(parts, value)
  end
  local balance = tonumber(parts[1]) or 0
  local id = tonumber(parts[2]) or 0
  return {balance = balance, id = id}
end

-- Writes wallet balance and ID to disk
local function writeWallet(balance, id)
  local f = fs.open("disk/wallet.dat", "w")
  local raw = tostring(balance) .. "|" .. tostring(id)
  f.write(xor(raw))
  f.close()
end

-- Reads all purchase log entries for the current card
local function readAllPurchases()
  if not drive.isDiskPresent() or not fs.exists("disk/purchase.log") then
    return {}
  end
  local lines = {}
  local f = fs.open("disk/purchase.log", "r")
  while true do
    local line = f.readLine()
    if not line then break end
    table.insert(lines, line)
  end
  f.close()
  return lines
end

-- Draws a neon green UFO at the top of the monitor
local function drawUFO()
  local w, _ = monitor.getSize()
  -- Improved UFO ASCII art for better appearance
  local ufo = {
    "        ___        ",
    "     .-'   '-.     ",
    "   .'         '.   ",
    "  /  O     O    \\  ",
    " |               | ",
    " |   .-'''''-.   | ",
    "  \\_/         \\_/  ",
    "     '-.___,-'     ",
    "      /     \\      ",
    "     /_/ \\_\\     ",
  }
  local startY = 1
  for i, line in ipairs(ufo) do
    local x = math.floor((w - #line) / 2) + 1
    monitor.setCursorPos(x, startY + i - 1)
    monitor.setBackgroundColor(getPastelPurple(i))
    monitor.setTextColor(colors.lime)
    monitor.write(line)
  end
end

-- Centered draw utility with neon green default
local function drawCenter(line, text, color, bg)
  local w, _ = monitor.getSize()
  local x = math.floor((w - #text) / 2) + 1
  monitor.setCursorPos(x, line)
  -- Use a solid background for text for readability
  monitor.setBackgroundColor(bg or colors.black)
  monitor.setTextColor(color or colors.lime)
  monitor.clearLine()
  monitor.write(text)
end

-- Button draw utility with neon effect
local function drawButton(x, y, label, color, width)
  width = width or #label
  monitor.setCursorPos(x, y)
  monitor.setBackgroundColor(colors.green)
  monitor.setTextColor(color or colors.black)
  monitor.write(label)
  -- Neon border effect
  monitor.setCursorPos(x-1, y)
  monitor.setTextColor(colors.lime)
  monitor.write(">")
  monitor.setCursorPos(x+width, y)
  monitor.write("<")
end

-- Draws the transaction log in a small section, with scrolling support
local function drawTransactionLog(logLines, scroll, maxLines, w, yStart)
  -- Use smaller text: setTextScale(0.5) for log, restore after
  local prevScale = monitor.getTextScale()
  monitor.setTextScale(0.5)
  for i = 1, maxLines do
    local idx = scroll + i
    local line = logLines[idx]
    monitor.setCursorPos(2, yStart + i - 1)
    monitor.setBackgroundColor(getPastelPurple(yStart + i - 1))
    monitor.setTextColor(colors.white)
    monitor.clearLine()
    if line then
      -- Truncate if too long
      if #line > w-2 then
        line = line:sub(1, w-5) .. "..."
      end
      monitor.write(line)
    end
  end
  monitor.setTextScale(prevScale)
end

-- Main loop
local function main()
  local w, h = monitor.getSize()
  local logScroll = 0
  while true do
    local wallet = readWallet()
    local allPurchases = readAllPurchases()

    -- Set a nice pastel purple background
    monitor.setBackgroundColor(colors.purple)
    monitor.clear()

    -- Draw UFO and neon title
    drawUFO()
    drawCenter(7, "LongiMart Banking", colors.lime)
    drawCenter(8, "Account Terminal", colors.green)

    if not wallet then
      drawCenter(10, "Insert Disk to Begin", colors.red)
      drawCenter(12, "Awaiting Disk...", colors.lime)
    else
      -- Neon balance and ID, centered
      drawCenter(10, ("[Balance: " .. wallet.balance .. " BB]"), colors.lime)
      drawCenter(11, ("[ID: " .. wallet.id .. "]"), colors.cyan)

      -- Add buttons (row 13)
      local addLabels = {"+1", "+5", "+10", "+50", "+100", "+1K"}
      local addValues = {1, 5, 10, 50, 100, 1000}
      local btnW = 4
      local gap = 1
      local totalBtnW = #addLabels * btnW + (#addLabels - 1) * gap
      local startX = math.floor((w - totalBtnW) / 2) + 1
      for i, label in ipairs(addLabels) do
        drawButton(startX + (i-1)*(btnW+gap), 13, label, colors.black, btnW)
      end
      drawCenter(12, "NEON CREDIT", colors.lime)

      -- Subtract buttons (row 15)
      local subLabels = {"-1", "-5", "-10", "-50", "-100", "-1K"}
      local subValues = {1, 5, 10, 50, 100, 1000}
      for i, label in ipairs(subLabels) do
        drawButton(startX + (i-1)*(btnW+gap), 15, label, colors.black, btnW)
      end
      drawCenter(14, "NEON DEBIT", colors.green)

      -- ID control buttons (row 17)
      local idBtnW = 7
      local idStartX = math.floor((w - (idBtnW*2 + gap)) / 2) + 1
      drawButton(idStartX, 17, "ID +1", colors.lime, idBtnW)
      drawButton(idStartX + idBtnW + gap, 17, "ID -1", colors.lime, idBtnW)
      drawCenter(16, "ID CONTROL", colors.lime)

      -- Transaction log (rows 19-24, 6 lines, small text, scrollable)
      local logYStart = 19
      local logLines = allPurchases
      local maxLogLines = 6
      local logW = w
      drawCenter(logYStart-1, "Transaction Log (Scroll: ^ v)", colors.green)
      drawTransactionLog(logLines, logScroll, maxLogLines, logW, logYStart)

      -- Wait for touch and handle
      local _, _, x, y = os.pullEvent("monitor_touch")
      local b, id = wallet.balance, wallet.id

      -- Add BB
      if y == 13 then
        for i = 1, #addLabels do
          local bx = startX + (i-1)*(btnW+gap)
          if x >= bx and x < bx+btnW then
            b = b + addValues[i]
            break
          end
        end
      -- Subtract BB
      elseif y == 15 then
        for i = 1, #subLabels do
          local bx = startX + (i-1)*(btnW+gap)
          if x >= bx and x < bx+btnW then
            b = math.max(0, b - subValues[i])
            break
          end
        end
      -- ID Control
      elseif y == 17 then
        if x >= idStartX and x < idStartX + idBtnW then
          id = id + 1
        elseif x >= idStartX + idBtnW + gap and x < idStartX + idBtnW*2 + gap then
          id = math.max(0, id - 1)
        end
      -- Transaction log scroll up
      elseif y == logYStart-1 and x <= 3 then
        if logScroll > 0 then
          logScroll = logScroll - 1
        end
      -- Transaction log scroll down
      elseif y == logYStart-1 and x >= w-2 then
        if #logLines > maxLogLines and logScroll < #logLines - maxLogLines then
          logScroll = logScroll + 1
        end
      end

      writeWallet(b, id)
    end
  end
end

main()

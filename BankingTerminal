-- LongiMart Banking Terminal with Pack Store + Key Generation & Disk Registry

local monitor = peripheral.find("monitor")
local sideDisplay = peripheral.find("monitor", function(name, obj) return name ~= peripheral.getName(monitor) end)
local drive = peripheral.find("drive")
if not monitor or not drive or not sideDisplay then error("Monitor, Side Display, or Drive not found!") end

monitor.setTextScale(0.5)
sideDisplay.setTextScale(0.5)
local key = 97

local function xor(str)
  local out = {}
  for i = 1, #str do
    table.insert(out, string.char(bit.bxor(str:byte(i), key)))
  end
  return table.concat(out)
end

local function parseDiskLabel()
  local label = drive.getDiskLabel()
  if not label then return "Unknown", 0 end
  local name, id = label:match("^(.-)%s*%-%s*(%d+)$")
  return name or "Unknown", tonumber(id) or 0
end

local function readWallet()
  if not drive.isDiskPresent() then return nil end
  if not fs.exists("disk/wallet.dat") then return {balance=0, id=0} end
  local f = fs.open("disk/wallet.dat", "r")
  local data = xor(f.readAll())
  f.close()
  local parts = {}
  for value in string.gmatch(data, "[^|]+") do table.insert(parts, value) end
  return {balance=tonumber(parts[1]), id=tonumber(parts[2])}
end

local function writeWallet(balance, id)
  local f = fs.open("disk/wallet.dat", "w")
  f.write(xor(tostring(balance) .. "|" .. tostring(id)))
  f.close()
end

local function updateRegistry(name, id, sessionBalance)
  local path = "/active_disks.log"
  local lines = {}
  if fs.exists(path) then
    local f = fs.open(path, "r")
    while true do
      local line = f.readLine()
      if not line then break end
      table.insert(lines, line)
    end
    f.close()
  end

  local updated = false
  for i, line in ipairs(lines) do
    local label, last, allTime = line:match("^(.-)%s*|%s*Last:%s*(%d+)%s*|%s*Total:%s*(%d+)$")
    if label == (name .. " - " .. id) then
      last, allTime = tonumber(last), tonumber(allTime)
      lines[i] = label .. " | Last: " .. sessionBalance .. " | Total: " .. (allTime + sessionBalance)
      updated = true
      break
    end
  end

  if not updated then
    table.insert(lines, name .. " - " .. id .. " | Last: " .. sessionBalance .. " | Total: " .. sessionBalance)
  end

  local f = fs.open(path, "w")
  for _, line in ipairs(lines) do f.writeLine(line) end
  f.close()
end

local function wrapText(text, width)
  local words = {}
  for word in text:gmatch("[^%s]+") do table.insert(words, word) end
  local lines = {}
  local current = ""
  for _, word in ipairs(words) do
    if #current + #word + 1 <= width then
      current = current .. (current == "" and "" or " ") .. word
    else
      table.insert(lines, current)
      current = word
    end
  end
  if current ~= "" then table.insert(lines, current) end
  return lines
end

local function drawSideDisplay()
  sideDisplay.setBackgroundColor(colors.black)
  sideDisplay.clear()
  local w, h = sideDisplay.getSize()
  drawCenterSide(1, "Active Disks", colors.yellow)
  if not fs.exists("/active_disks.log") then return end
  local f = fs.open("/active_disks.log", "r")
  local i = 1
  while true do
    local line = f.readLine()
    if not line then break end
    local wrapped = wrapText(line, w)
    for _, segment in ipairs(wrapped) do
      if i < h then
        sideDisplay.setCursorPos(1, i + 1)
        sideDisplay.setTextColor(colors.white)
        sideDisplay.write(segment)
        i = i + 1
      end
    end
  end
  f.close()
end

function drawCenterMain(y, text, color)
  local w = select(1, monitor.getSize())
  local x = math.floor((w - #text) / 2)
  monitor.setCursorPos(x, y)
  monitor.setTextColor(color or colors.white)
  monitor.setBackgroundColor(colors.black)
  monitor.clearLine()
  monitor.write(text)
end

function drawCenterSide(y, text, color)
  local w = select(1, sideDisplay.getSize())
  local x = math.floor((w - #text) / 2)
  sideDisplay.setCursorPos(x, y)
  sideDisplay.setTextColor(color or colors.white)
  sideDisplay.setBackgroundColor(colors.black)
  sideDisplay.write(text)
end

local function drawBalanceOptions(balance, name, id)
  local amounts = {1000, 2000, 3000, 4000, 5000}
  monitor.setBackgroundColor(colors.black)
  monitor.clear()

  drawCenterMain(2, "Create Key for: " .. name .. " - " .. id, colors.lime)
  drawCenterMain(4, "Balance: " .. balance .. " BB", colors.cyan)

  for i, amt in ipairs(amounts) do
    local y = 5 + i
    drawCenterMain(y, "[+ " .. amt .. " BB]", colors.green)
  end
end

local function main()
  while true do
    if not drive.isDiskPresent() then
      monitor.clear()
      drawCenterMain(5, "Insert Disk to Begin", colors.red)
      sleep(1)
    else
      local name, id = parseDiskLabel()
      local wallet = readWallet()
      local balance = wallet and wallet.balance or 0
      drawBalanceOptions(balance, name, id)

      local _, _, _, y = os.pullEvent("monitor_touch")
      local idx = y - 5
      local amounts = {1000, 2000, 3000, 4000, 5000}

      if amounts[idx] then
        balance = balance + amounts[idx]
        writeWallet(balance, id)
        updateRegistry(name, id, amounts[idx])
        drawBalanceOptions(balance, name, id)
        drawSideDisplay()
        sleep(0.5)
      end
    end
  end
end

main()
-- LongiMart Banking Terminal with Pack Store + Key Generation & Disk Registry

local monitor = peripheral.find("monitor")
local sideDisplay = peripheral.find("monitor", function(name, obj) return name ~= peripheral.getName(monitor) end)
local drive = peripheral.find("drive")
if not monitor or not drive or not sideDisplay then error("Monitor, Side Display, or Drive not found!") end

monitor.setTextScale(0.5)
sideDisplay.setTextScale(0.5)
local key = 97

local function xor(str)
  local out = {}
  for i = 1, #str do
    table.insert(out, string.char(bit.bxor(str:byte(i), key)))
  end
  return table.concat(out)
end

local function parseDiskLabel()
  local label = drive.getDiskLabel()
  if not label then return "Unknown", 0 end
  local name, id = label:match("^(.-)%s*%-%s*(%d+)$")
  return name or "Unknown", tonumber(id) or 0
end

local function readWallet()
  if not drive.isDiskPresent() then return nil end
  if not fs.exists("disk/wallet.dat") then return {balance=0, id=0} end
  local f = fs.open("disk/wallet.dat", "r")
  local data = xor(f.readAll())
  f.close()
  local parts = {}
  for value in string.gmatch(data, "[^|]+") do table.insert(parts, value) end
  return {balance=tonumber(parts[1]), id=tonumber(parts[2])}
end

local function writeWallet(balance, id)
  local f = fs.open("disk/wallet.dat", "w")
  f.write(xor(tostring(balance) .. "|" .. tostring(id)))
  f.close()
end

local function updateRegistry(name, id, sessionBalance)
  local path = "/active_disks.log"
  local lines = {}
  if fs.exists(path) then
    local f = fs.open(path, "r")
    while true do
      local line = f.readLine()
      if not line then break end
      table.insert(lines, line)
    end
    f.close()
  end

  local updated = false
  for i, line in ipairs(lines) do
    local label, last, allTime = line:match("^(.-)%s*|%s*Last:%s*(%d+)%s*|%s*Total:%s*(%d+)$")
    if label == (name .. " - " .. id) then
      last, allTime = tonumber(last), tonumber(allTime)
      lines[i] = label .. " | Last: " .. sessionBalance .. " | Total: " .. (allTime + sessionBalance)
      updated = true
      break
    end
  end

  if not updated then
    table.insert(lines, name .. " - " .. id .. " | Last: " .. sessionBalance .. " | Total: " .. sessionBalance)
  end

  local f = fs.open(path, "w")
  for _, line in ipairs(lines) do f.writeLine(line) end
  f.close()
end

local function wrapText(text, width)
  local words = {}
  for word in text:gmatch("[^%s]+") do table.insert(words, word) end
  local lines = {}
  local current = ""
  for _, word in ipairs(words) do
    if #current + #word + 1 <= width then
      current = current .. (current == "" and "" or " ") .. word
    else
      table.insert(lines, current)
      current = word
    end
  end
  if current ~= "" then table.insert(lines, current) end
  return lines
end

local function drawSideDisplay()
  sideDisplay.setBackgroundColor(colors.black)
  sideDisplay.clear()
  local w, h = sideDisplay.getSize()
  drawCenterSide(1, "Active Disks", colors.yellow)
  if not fs.exists("/active_disks.log") then return end
  local f = fs.open("/active_disks.log", "r")
  local i = 1
  while true do
    local line = f.readLine()
    if not line then break end
    local wrapped = wrapText(line, w)
    for _, segment in ipairs(wrapped) do
      if i < h then
        sideDisplay.setCursorPos(1, i + 1)
        sideDisplay.setTextColor(colors.white)
        sideDisplay.write(segment)
        i = i + 1
      end
    end
  end
  f.close()
end

function drawCenterMain(y, text, color)
  local w = select(1, monitor.getSize())
  local x = math.floor((w - #text) / 2)
  monitor.setCursorPos(x, y)
  monitor.setTextColor(color or colors.white)
  monitor.setBackgroundColor(colors.black)
  monitor.clearLine()
  monitor.write(text)
end

function drawCenterSide(y, text, color)
  local w = select(1, sideDisplay.getSize())
  local x = math.floor((w - #text) / 2)
  sideDisplay.setCursorPos(x, y)
  sideDisplay.setTextColor(color or colors.white)
  sideDisplay.setBackgroundColor(colors.black)
  sideDisplay.write(text)
end

local function drawBalanceOptions(balance, name, id)
  local amounts = {1000, 2000, 3000, 4000, 5000}
  monitor.setBackgroundColor(colors.black)
  monitor.clear()

  drawCenterMain(2, "Create Key for: " .. name .. " - " .. id, colors.lime)
  drawCenterMain(4, "Balance: " .. balance .. " BB", colors.cyan)

  for i, amt in ipairs(amounts) do
    local y = 5 + i
    drawCenterMain(y, "[+ " .. amt .. " BB]", colors.green)
  end
end

local function main()
  while true do
    if not drive.isDiskPresent() then
      monitor.clear()
      drawCenterMain(5, "Insert Disk to Begin", colors.red)
      sleep(1)
    else
      local name, id = parseDiskLabel()
      local wallet = readWallet()
      local balance = wallet and wallet.balance or 0
      drawBalanceOptions(balance, name, id)

      local _, _, _, y = os.pullEvent("monitor_touch")
      local idx = y - 5
      local amounts = {1000, 2000, 3000, 4000, 5000}

      if amounts[idx] then
        balance = balance + amounts[idx]
        writeWallet(balance, id)
        updateRegistry(name, id, amounts[idx])
        drawBalanceOptions(balance, name, id)
        drawSideDisplay()
        sleep(0.5)
      end
    end
  end
end

main()
